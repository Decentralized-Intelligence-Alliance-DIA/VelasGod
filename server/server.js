// Generated by LiveScript 1.6.0
(function(){
  var WebSocket, config, handleMessage, poll, tanos, layout, buildApp, checkers, handlers, each, gateway, connections, wss, app;
  WebSocket = require('ws');
  config = require('./config.json');
  handleMessage = require('./handle-message.ls');
  poll = require('./poll.ls');
  tanos = require('tanos');
  layout = require('./bot/layout.ls');
  buildApp = require('./bot/build-app.ls');
  checkers = require('./checkers.ls');
  handlers = require('./handlers.ls');
  each = require('prelude-ls').each;
  gateway = require('./gateway.ls');
  connections = [];
  wss = new WebSocket.Server(config.ws);
  app = buildApp({
    connections: connections,
    handlers: handlers,
    wss: wss,
    config: config.bot
  });
  tanos((import$({
    layout: layout,
    app: app
  }, config.bot)), function(err, bot){
    var removeWs, uuidv4;
    poll(connections, bot.db);
    checkers(config.bot, bot);
    removeWs = function(ws){
      return function(){
        var index;
        index = connections.indexOf(ws);
        if (index === -1) {
          return;
        }
        return connections.splice(index, 1);
      };
    };
    uuidv4 = function(){
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c){
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x'
          ? r
          : r & 3 | 8;
        return v.toString(16);
      });
    };
    wss.on('connection', function(ws){
      connections.push(ws);
      ws.id = uuidv4();
      ws.on('message', handleMessage(ws, bot.db));
      ws.on('close', removeWs(ws));
      ws.send('config');
      return setTimeout(function(){
        ws.send("auth_" + ws.id);
        return setTimeout(function(){
          return ws.send('version');
        }, 1000);
      }, 1000);
    });
    console.log("Started server on port", config.ws.port);
    return gateway(connections, bot.http);
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
